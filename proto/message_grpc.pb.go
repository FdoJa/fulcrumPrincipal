// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Informantes_AgregarBase_FullMethodName     = "/grpc.Informantes/AgregarBase"
	Informantes_RenombrarBase_FullMethodName   = "/grpc.Informantes/RenombrarBase"
	Informantes_ActualizarValor_FullMethodName = "/grpc.Informantes/ActualizarValor"
	Informantes_BorrarBase_FullMethodName      = "/grpc.Informantes/BorrarBase"
)

// InformantesClient is the client API for Informantes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformantesClient interface {
	AgregarBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Recepcion, error)
	RenombrarBase(ctx context.Context, in *BaseModificada, opts ...grpc.CallOption) (*Recepcion, error)
	ActualizarValor(ctx context.Context, in *ActualizarSoldados, opts ...grpc.CallOption) (*Recepcion, error)
	BorrarBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Recepcion, error)
}

type informantesClient struct {
	cc grpc.ClientConnInterface
}

func NewInformantesClient(cc grpc.ClientConnInterface) InformantesClient {
	return &informantesClient{cc}
}

func (c *informantesClient) AgregarBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, Informantes_AgregarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informantesClient) RenombrarBase(ctx context.Context, in *BaseModificada, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, Informantes_RenombrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informantesClient) ActualizarValor(ctx context.Context, in *ActualizarSoldados, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, Informantes_ActualizarValor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informantesClient) BorrarBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, Informantes_BorrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformantesServer is the server API for Informantes service.
// All implementations must embed UnimplementedInformantesServer
// for forward compatibility
type InformantesServer interface {
	AgregarBase(context.Context, *Base) (*Recepcion, error)
	RenombrarBase(context.Context, *BaseModificada) (*Recepcion, error)
	ActualizarValor(context.Context, *ActualizarSoldados) (*Recepcion, error)
	BorrarBase(context.Context, *Base) (*Recepcion, error)
	mustEmbedUnimplementedInformantesServer()
}

// UnimplementedInformantesServer must be embedded to have forward compatible implementations.
type UnimplementedInformantesServer struct {
}

func (UnimplementedInformantesServer) AgregarBase(context.Context, *Base) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedInformantesServer) RenombrarBase(context.Context, *BaseModificada) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedInformantesServer) ActualizarValor(context.Context, *ActualizarSoldados) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedInformantesServer) BorrarBase(context.Context, *Base) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedInformantesServer) mustEmbedUnimplementedInformantesServer() {}

// UnsafeInformantesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformantesServer will
// result in compilation errors.
type UnsafeInformantesServer interface {
	mustEmbedUnimplementedInformantesServer()
}

func RegisterInformantesServer(s grpc.ServiceRegistrar, srv InformantesServer) {
	s.RegisterService(&Informantes_ServiceDesc, srv)
}

func _Informantes_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformantesServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Informantes_AgregarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformantesServer).AgregarBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _Informantes_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModificada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformantesServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Informantes_RenombrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformantesServer).RenombrarBase(ctx, req.(*BaseModificada))
	}
	return interceptor(ctx, in, info, handler)
}

func _Informantes_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualizarSoldados)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformantesServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Informantes_ActualizarValor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformantesServer).ActualizarValor(ctx, req.(*ActualizarSoldados))
	}
	return interceptor(ctx, in, info, handler)
}

func _Informantes_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformantesServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Informantes_BorrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformantesServer).BorrarBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

// Informantes_ServiceDesc is the grpc.ServiceDesc for Informantes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Informantes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Informantes",
	HandlerType: (*InformantesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarBase",
			Handler:    _Informantes_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _Informantes_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _Informantes_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _Informantes_BorrarBase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

const (
	Consistencia_ConseguirLogs_FullMethodName           = "/grpc.Consistencia/ConseguirLogs"
	Consistencia_EnviarDatosActualizados_FullMethodName = "/grpc.Consistencia/EnviarDatosActualizados"
)

// ConsistenciaClient is the client API for Consistencia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsistenciaClient interface {
	ConseguirLogs(ctx context.Context, in *Recepcion, opts ...grpc.CallOption) (*LogList, error)
	EnviarDatosActualizados(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Recepcion, error)
}

type consistenciaClient struct {
	cc grpc.ClientConnInterface
}

func NewConsistenciaClient(cc grpc.ClientConnInterface) ConsistenciaClient {
	return &consistenciaClient{cc}
}

func (c *consistenciaClient) ConseguirLogs(ctx context.Context, in *Recepcion, opts ...grpc.CallOption) (*LogList, error) {
	out := new(LogList)
	err := c.cc.Invoke(ctx, Consistencia_ConseguirLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistenciaClient) EnviarDatosActualizados(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, Consistencia_EnviarDatosActualizados_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsistenciaServer is the server API for Consistencia service.
// All implementations must embed UnimplementedConsistenciaServer
// for forward compatibility
type ConsistenciaServer interface {
	ConseguirLogs(context.Context, *Recepcion) (*LogList, error)
	EnviarDatosActualizados(context.Context, *Datos) (*Recepcion, error)
	mustEmbedUnimplementedConsistenciaServer()
}

// UnimplementedConsistenciaServer must be embedded to have forward compatible implementations.
type UnimplementedConsistenciaServer struct {
}

func (UnimplementedConsistenciaServer) ConseguirLogs(context.Context, *Recepcion) (*LogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConseguirLogs not implemented")
}
func (UnimplementedConsistenciaServer) EnviarDatosActualizados(context.Context, *Datos) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarDatosActualizados not implemented")
}
func (UnimplementedConsistenciaServer) mustEmbedUnimplementedConsistenciaServer() {}

// UnsafeConsistenciaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsistenciaServer will
// result in compilation errors.
type UnsafeConsistenciaServer interface {
	mustEmbedUnimplementedConsistenciaServer()
}

func RegisterConsistenciaServer(s grpc.ServiceRegistrar, srv ConsistenciaServer) {
	s.RegisterService(&Consistencia_ServiceDesc, srv)
}

func _Consistencia_ConseguirLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recepcion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistenciaServer).ConseguirLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consistencia_ConseguirLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistenciaServer).ConseguirLogs(ctx, req.(*Recepcion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consistencia_EnviarDatosActualizados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Datos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistenciaServer).EnviarDatosActualizados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consistencia_EnviarDatosActualizados_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistenciaServer).EnviarDatosActualizados(ctx, req.(*Datos))
	}
	return interceptor(ctx, in, info, handler)
}

// Consistencia_ServiceDesc is the grpc.ServiceDesc for Consistencia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consistencia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Consistencia",
	HandlerType: (*ConsistenciaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConseguirLogs",
			Handler:    _Consistencia_ConseguirLogs_Handler,
		},
		{
			MethodName: "EnviarDatosActualizados",
			Handler:    _Consistencia_EnviarDatosActualizados_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
